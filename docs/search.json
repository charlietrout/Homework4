[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "Charlie Armentrout ST 558 Homework 4",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\n&gt; The purpose of the lapply() function is to apply a function to lists and obtain a list object. The equivalent purrr function is map().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\n&gt; result_list &lt;- lapply(my_list, function(x) cor(x, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\n&gt; The two advantages of using purrr functions instead of the BaseR apply family is more consistency and some helper functions. More on the consistency advantage, purrr functions like map() always returns outputs in the form of a list, which is predictable regardless of the input structure.\n\nWhat is a side-effect function?\n\n&gt; A side-effect function is a function that changes the state of something or in other words, causes observable changes to a program’s state or environment.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\n&gt; When you call a function, it creates temporary function environments. This is why the variable sd does not exist outside of the function it was used in as the temporary function environment goes away as soon as the function is done running. This is why the sd variable in a function does not conflict with the sd function itself."
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "Charlie Armentrout ST 558 Homework 4",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\n&gt; The purpose of the lapply() function is to apply a function to lists and obtain a list object. The equivalent purrr function is map().\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want to use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply())\n\n&gt; result_list &lt;- lapply(my_list, function(x) cor(x, method = “kendall”))\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\n&gt; The two advantages of using purrr functions instead of the BaseR apply family is more consistency and some helper functions. More on the consistency advantage, purrr functions like map() always returns outputs in the form of a list, which is predictable regardless of the input structure.\n\nWhat is a side-effect function?\n\n&gt; A side-effect function is a function that changes the state of something or in other words, causes observable changes to a program’s state or environment.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\n&gt; When you call a function, it creates temporary function environments. This is why the variable sd does not exist outside of the function it was used in as the temporary function environment goes away as soon as the function is done running. This is why the sd variable in a function does not conflict with the sd function itself."
  },
  {
    "objectID": "Homework4.html#task-2---writing-r-functions",
    "href": "Homework4.html#task-2---writing-r-functions",
    "title": "Charlie Armentrout ST 558 Homework 4",
    "section": "Task 2 - Writing R Functions",
    "text": "Task 2 - Writing R Functions\nThe getRMSE() function computes the Root Mean Square Error (RMSE) between actual and predicted values. It handles missing values (NA) using optional arguments (…) to ensure flexibility in data processing. 1.\n\ngetRMSE &lt;- function(resp, pred, ...) {\n  # Calculating RMSE\n  rmse &lt;- sqrt(mean((resp - pred)^2, ...))\n  return(rmse)\n}\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n# Introduce missing values in resp\nresp[c(4, 8)] &lt;- NA_real_\ngetRMSE(resp, pred, na.rm=TRUE)\n\n[1] 0.9452298\n\ngetRMSE(resp, pred)\n\n[1] NA\n\n\nThe getMAE() function computes the Mean Absolute Error (MAE) between actual and predicted values. Like getRMSE() above, it accommodates missing values with (…) if need be and provides a robust metric for evaluating prediction accuracy. 3.\n\ngetMAE &lt;- function(resp, pred, ...) {\n  # Calculating MAE\n  rmse &lt;- mean(abs(resp - pred), ...)\n  return(rmse)\n}\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\ngetMAE(resp,pred)\n\n[1] 0.8155776\n\n# Introduce missing values in resp\nresp[c(4, 8)] &lt;- NA_real_\ngetMAE(resp, pred, na.rm=TRUE)\n\n[1] 0.8062454\n\ngetMAE(resp, pred)\n\n[1] NA\n\n\nThe getMetrics() function acts as a wrapper to compute multiple evaluation metrics (such as RMSE and MAE) for comparing actual and predicted values. It checks inputs for validity and uses optional arguments (…) to handle missing values appropriately if need be. 5.\n\ngetMetrics &lt;- function(actual, predicted, metrics = c(\"RMSE\", \"MAE\"), ...) {\n  # Check if actual and predicted are numeric vectors\n  if (!is.atomic(actual) || !is.numeric(actual) || !is.atomic(predicted) || !is.numeric(predicted)) {\n    message(\"Error: 'actual' and 'predicted' must be numeric vectors.\")\n    return()\n  }\n  results &lt;- list()\n  if (\"RMSE\" %in% metrics) {\n    results$RMSE &lt;- getRMSE(actual, predicted, ...)\n  }\n  if (\"MAE\" %in% metrics) {\n    results$MAE &lt;- getMAE(actual, predicted, ...)\n  }\n  return(results)\n}\n\n\n\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\ngetMetrics(resp, pred, metrics = \"RMSE\")\n\n$RMSE\n[1] 0.9581677\n\ngetMetrics(resp, pred, metrics = \"MAE\")\n\n$MAE\n[1] 0.8155776\n\ngetMetrics(resp, pred, metrics = c(\"RMSE\", \"MAE\"))\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\nresp[c(2, 6)] &lt;- NA_real_\ngetMetrics(resp, pred, metrics = \"RMSE\")\n\n$RMSE\n[1] NA\n\ngetMetrics(resp, pred, metrics = \"MAE\")\n\n$MAE\n[1] NA\n\ngetMetrics(resp, pred, metrics = c(\"RMSE\", \"MAE\"))\n\n$RMSE\n[1] NA\n\n$MAE\n[1] NA\n\n# Original values\noriginal_values &lt;- 3 + 10 * x + rnorm(n)\n# Reset NA values back to original values\nresp[c(2, 6)] &lt;- original_values[c(2, 6)]\nresp &lt;- data.frame(value = as.character(resp))\npred &lt;- data.frame(value = as.character(pred))\nincorrectdata &lt;- getMetrics(resp, pred, metrics = c(\"RMSE\", \"MAE\"))\n\nError: 'actual' and 'predicted' must be numeric vectors."
  }
]